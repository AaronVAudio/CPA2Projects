package com.example.ciphersight

import android.graphics.Bitmap
import android.graphics.Color
import android.os.Bundle
import android.os.Environment
import android.provider.MediaStore
import android.util.Log
import android.view.Gravity
import android.view.View
import android.widget.ImageView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.google.zxing.BarcodeFormat
import com.google.zxing.MultiFormatWriter
import com.google.zxing.WriterException
import kotlinx.android.synthetic.main.activity_q_r.*
import java.io.File
import java.io.FileOutputStream
import java.util.*


class QRActivity : AppCompatActivity() {
    private lateinit var qrView: ImageView
    private lateinit var bitmap: Bitmap

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_q_r)

        if (supportActionBar != null)
            supportActionBar?.hide()

        val qrData = intent.getStringExtra("QRData")

        bitmap = generateQRCode(qrData.toString())

        imageViewQR.setImageBitmap(bitmap)

        qrView = findViewById(R.id.imageViewQR)
    }

    fun onButtonClick(view: View) {
        when (view.id) {
            R.id.buttonReturn -> finishAfterTransition()
            R.id.buttonSave -> {
                saveImage(bitmap, "QR")
            }
        }
    }

    private fun generateQRCode(text: String): Bitmap {
        val width = 500
        val height = 500
        val bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)
        val codeWriter = MultiFormatWriter()
        try {
            val bitMatrix = codeWriter.encode(text, BarcodeFormat.QR_CODE, width, height)
            for (x in 0 until width) {
                for (y in 0 until height) {
                    bitmap.setPixel(x, y, if (bitMatrix[x, y]) Color.BLACK else Color.WHITE)
                }
            }
        } catch (e: WriterException) {
            Log.d("QR", "generateQRCode: ${e.message}")
            val toast = Toast.makeText(this, "Error: ${e.message}", Toast.LENGTH_SHORT)
            toast.setGravity(Gravity.CENTER, 0, 0)
            toast.show()
        }
        return bitmap
    }

    private fun saveImage(finalBitmap: Bitmap, image_name: String) {
        MediaStore.Images.Media.insertImage(applicationContext.contentResolver, finalBitmap, image_name + Date(), "QR Code Generated by Cipher Sight");
        val toast = Toast.makeText(this, "QR Code Saved!", Toast.LENGTH_SHORT)
        toast.setGravity(Gravity.CENTER, 0, 0)
        toast.show()
    }
}